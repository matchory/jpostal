plugins {
    id 'c'
    id 'java'
    id 'java-library'
    id 'application'
    id 'signing'
    id 'maven-publish'
    id "com.vanniktech.maven.publish" version "0.34.0"
}

group = 'com.matchory.packages'
version = getProperty("version").toString().replaceFirst("^v", "") ?: '0.0.0'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

sourceSets.main.java.srcDirs = ["src/main/java"]
sourceSets.test.java.srcDirs = ["src/test/java"]


model {
    platforms {
        linux_x86_64 {
            architecture "x86_64"
            operatingSystem "linux"
        }
        linux_aarch64 {
            architecture "arm64"
            operatingSystem "linux"
        }
        osx_aarch64 {
            architecture "arm64"
            operatingSystem "mac os x"
        }
    }

    components {
        jpostal(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir "src/jpostal/c"
                        include "**/*.c"
                    }
                }
            }

            binaries.all {
                def jvmHome = org.gradle.internal.jvm.Jvm.current().javaHome

                // Common includes for all platforms
                cCompiler.args '-I', "${jvmHome}/include"
                cCompiler.args '-I', "${projectDir}/libs/libpostal/include"

                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.9'
                    linker.args '-mmacosx-version-min=10.9'
                    linker.args '-stdlib=libc++'
                    linker.args '-L', "${projectDir}/libs/libpostal/macos/aarch64"
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'

                    // Use current build platform architecture for local builds
                    def buildArch = System.getProperty("os.arch").toLowerCase()
                    def archFolder = buildArch.contains("aarch64") || buildArch.contains("arm") ? "aarch64" : "x86_64"
                    def libPath = "${projectDir}/libs/libpostal/linux/${archFolder}"

                    linker.args '-L', libPath
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                }
                linker.args '-lpostal'  // Link with libpostal
            }
        }
    }
}

tasks.processResources {
    // Only build JNI bindings if explicitly requested via gradle property
    if (project.hasProperty("buildNative") && project.property("buildNative") == "true") {
        dependsOn 'jpostalSharedLibrary'

        // Include freshly built JNI bindings
        if (file("${rootProject.layout.buildDirectory}/libs/jpostal/shared").exists()) {
            from("${rootProject.layout.buildDirectory}/libs/jpostal/shared") {
                include '*.so', '*.dylib', '*.dll'
                into("native")
                rename { filename ->
                    if (filename.startsWith("libjpostal")) {
                        return System.mapLibraryName("jpostal")
                    }
                    return filename
                }
            }
        }
    }

    // Always include all pre-built native libraries for universal JAR
    // Include all libpostal libraries
    from("${projectDir}/libs/libpostal/linux/x86_64") {
        include '*.so'
        into("native/linux/x86_64")
    }

    from("${projectDir}/libs/libpostal/linux/aarch64") {
        include '*.so'
        into("native/linux/aarch64")
    }

    from("${projectDir}/libs/libpostal/macos/aarch64") {
        include '*.dylib'
        into("native/macos/aarch64")
    }

    // Include all pre-built JNI bindings
    from("${projectDir}/libs/jni/linux/x86_64") {
        include '*.so'
        into("native/linux/x86_64")
    }

    from("${projectDir}/libs/jni/linux/aarch64") {
        include '*.so'
        into("native/linux/aarch64")
    }

    from("${projectDir}/libs/jni/macos/aarch64") {
        include '*.dylib'
        into("native/macos/aarch64")
    }
}


// Only build JNI bindings if explicitly requested
if (project.hasProperty("buildNative") && project.property("buildNative") == "true") {
    classes.dependsOn 'jpostalSharedLibrary'
}

// Ensure JAR includes native libraries
// Legacy platform-specific JAR task (kept for compatibility but not used in CI)
tasks.register('platformJar', Jar) {
    dependsOn processResources
    duplicatesStrategy = DuplicatesStrategy.WARN
    from sourceSets.main.output

    // Add platform classifier to JAR name
    def currentOs = System.getenv("TARGET_OS") ?: System.getProperty("os.name").toLowerCase()
    def currentArch = System.getenv("TARGET_ARCH") ?: System.getProperty("os.arch").toLowerCase()

    def osName = currentOs.contains("mac") ? "macos" : "linux"
    def archName = currentArch.contains("aarch64") || currentArch.contains("arm") ? "aarch64" : "x86_64"

    archiveClassifier = "${osName}-${archName}"
}

// Universal JAR with all platforms (default build)
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
}

dependencies {
    testImplementation 'junit:junit:4.+'
}

mavenPublishing {
    coordinates("com.matchory.packages", "jpostal", getProperty("version").toString().replaceFirst("^v", ""))
    publishToMavenCentral()

    if (project.hasProperty("signingInMemoryKey") || project.hasProperty("signing.keyId")) {
        signAllPublications()
    }

    pom {
        name = 'jpostal'
        description = 'Java/JNI bindings to libpostal for fast international street address parsing/normalization'
        url = 'https://github.com/matchory/jpostal'
        developers {
            developer {
                id = 'openvenues'
                name = 'Open Venues'
                url = 'https://github.com/openvenues'
            }
            developer {
                id = 'matchory'
                name = 'Matchory GmbH'
                url = 'https://github.com/matchory'
            }
        }
        licenses {
            license {
                name = 'MIT'
            }
        }
        scm {
            connection = 'scm:git:git://github.com/matchory/libpostal.git'
            developerConnection = 'scm:git:ssh://github.com/matchory/libpostal.git'
            url = 'https://github.com/matchory/libpostal'
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
